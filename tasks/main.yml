---
# Set privileges required for hostmount
- include: privileges.yml

- name: Get nodes matching cassandra selector
  command: >-
    oc get node
    {% if openshift_metrics_cassandra_nodeselector is mapping %}
    -l {% for k, v in openshift_metrics_cassandra_nodeselector.items() %}{{ k }}={{ v }}{% if not loop.last %}","{% endif %}{% endfor %}
    {% else %}
    -l {{ openshift_metrics_cassandra_nodeselector }}
    {% endif %}
    --template '{{ '{{ range .items }}{{ .metadata.name }}{{ "\n"}}{{ end }}' }}'
  changed_when: false
  register: get_cassandra_nodes

- name: Cassandra hostmount directory on nodes
  delegate_to: "{{ item }}"
  file:
    state: directory
    path: "{{ openshift_metrics_cassandra_hostmount_path }}"
    owner: "{{ openshift_metrics_cassandra_hostmount_path_owner }}"
    group: "{{ openshift_metrics_cassandra_hostmount_path_group }}"
    mode: "{{ openshift_metrics_cassandra_hostmount_path_mode }}"
    setype: svirt_sandbox_file_t
  with_items: "{{ get_cassandra_nodes.stdout_lines }}"

- name: Get list of cassandra nodes with hostmount
  command: >-
    oc get rc -n openshift-infra -l metrics-infra=hawkular-cassandra
    --template '{{ '{{ range .items }}{{ $hostname := index .spec.template.spec.nodeSelector "kubernetes.io/hostname" }}{{ if $hostname }}{{ range .spec.template.spec.volumes }}{{ if .hostPath.path }}{{ if eq .hostPath.path "' ~ openshift_metrics_cassandra_hostmount_path ~ '" }}{{ $hostname }}{{ "\n" }}{{ end }}{{ end }}{{ end }}{{ end }}{{ end }}' }}'
  changed_when: false
  register: get_cassandra_nodes_with_hostmount

- set_fact:
    openshift_metrics_cassandra_hostmount_available_nodes: "{{ get_cassandra_nodes.stdout_lines | difference(get_cassandra_nodes_with_hostmount.stdout_lines) }}"

- name: Get list of cassandra replication controllers
  command: >
    oc get rc -n openshift-infra -l metrics-infra=hawkular-cassandra
    --template '{{ '{{ range .items }}{{ .metadata.name }}{{ "\n" }}{{ end }}' }}'
  changed_when: false
  register: get_cassandra_rcs

- include: configure-rc.yml
  with_items: "{{ get_cassandra_rcs.stdout_lines }}"
  loop_control:
    loop_var: cassandra_rc
